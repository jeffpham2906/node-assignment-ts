generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Customer {
  customerNumber         Int       @id @default(autoincrement()) @db.UnsignedInt
  customerName           String    @db.VarChar(255)
  contactLastName        String    @db.VarChar(50)
  contactFirstName       String    @db.VarChar(50)
  phone                  String    @db.VarChar(20)
  addressLine1           String    @db.VarChar(50)
  addressLine2           String?   @db.VarChar(50)
  city                   String    @db.VarChar(50)
  state                  String?   @db.VarChar(50)
  postalCode             String?   @db.VarChar(50)
  country                String    @db.VarChar(50)
  salesRepEmployeeNumber Int?      @db.UnsignedInt
  employee               Employee? @relation(fields: [salesRepEmployeeNumber], references: [employeeNumber], onDelete: SetNull, onUpdate: SetNull)
  creditLimit            Decimal?  @db.Decimal(10, 2)
  created_at             DateTime  @default(now()) @db.Timestamp(0)
  updated_at             DateTime  @default(now()) @db.Timestamp(0)
  orders                 Order[]

  @@map("customers")
}

model Employee {
  employeeNumber Int        @id @default(autoincrement()) @db.UnsignedInt
  lastName       String     @db.VarChar(50)
  firstName      String     @db.VarChar(50)
  extension      String     @db.VarChar(50)
  email          String     @db.VarChar(100)
  officeCode     String?    @db.VarChar(10)
  reportedBy     Employee[] @relation("EmployeeToEmployee")
  manager        Employee?  @relation("EmployeeToEmployee", fields: [reportsTo], references: [employeeNumber], onDelete: SetNull, onUpdate: Cascade)
  reportsTo      Int?       @db.UnsignedInt
  jobTitle       String     @db.VarChar(50)
  employeeRole   Role?      @relation(fields: [role], references: [name])
  role           String?    @default("Staff") @db.VarChar(50)
  created_at     DateTime   @default(now()) @db.Timestamp(0)
  updated_at     DateTime   @default(now()) @db.Timestamp(0)
  customers      Customer[]
  user           User?
  office         Office?    @relation(fields: [officeCode], references: [officeCode])

  @@map("employees")
}

model Office {
  officeCode   String     @id @default(cuid()) @db.VarChar(10)
  city         String     @db.VarChar(50)
  phone        String     @db.VarChar(20)
  addressLine1 String     @db.VarChar(50)
  addressLine2 String?    @db.VarChar(50)
  state        String     @db.VarChar(50)
  country      String     @db.VarChar(50)
  postalCode   String     @db.VarChar(50)
  territory    String     @db.VarChar(50)
  created_at   DateTime   @default(now()) @db.Timestamp(0)
  updated_at   DateTime   @default(now()) @db.Timestamp(0)
  employees    Employee[]

  @@map("offices")
}

model Role {
  id          Int        @id @default(autoincrement()) @db.UnsignedInt
  name        String     @db.VarChar(50)
  permissions Json
  employees   Employee[]

  @@unique([name])
  @@map("roles")
}

model User {
  employeeNumber Int?      @db.UnsignedInt
  employee       Employee? @relation(fields: [employeeNumber], references: [employeeNumber], onDelete: Cascade, onUpdate: Cascade)
  username       String    @unique @db.VarChar(20)
  password       String    @db.VarChar(100)

  @@unique([employeeNumber], map: "i_employee_number")
  @@map("users")
}

model Product {
  productCode        String       @id @default(cuid()) @db.VarChar(15)
  productName        String       @db.VarChar(70)
  productLine        String       @db.VarChar(50)
  productScale       String       @db.VarChar(10)
  productVendor      String       @db.VarChar(50)
  productDescription String       @db.Text
  quantityInStock    Int
  buyPrice           Decimal      @db.Decimal(10, 2)
  MSRP               Decimal      @db.Decimal(10, 2)
  ProductLine        ProductLine? @relation(fields: [productLine], references: [productLine])

  orderDetails OrderDetail[]

  @@map("products")
}

model ProductLine {
  productLine     String        @id @default(cuid()) @db.VarChar(15)
  textDescription String        @db.Text
  htmlDescription String        @db.Text
  image           String        @db.VarChar(100)
  products        Product[]
  orderDetails    OrderDetail[]

  @@map("productlines")
}

model Order {
  orderNumber    Int           @id @default(autoincrement()) @db.UnsignedInt
  orderDate      DateTime      @default(now())
  requiredDate   DateTime
  shippedDate    DateTime?
  status         String        @default("Pending") @db.VarChar(15)
  comments       String?
  customerNumber Int           @db.UnsignedInt
  customer       Customer      @relation(fields: [customerNumber], references: [customerNumber])
  orderDetails   OrderDetail[]

  @@map("orders")
}

model OrderDetail {
  Order                Order        @relation(fields: [orderNumber], references: [orderNumber])
  orderNumber          Int          @db.UnsignedInt
  Product              Product      @relation(fields: [productCode], references: [productCode])
  productCode          String       @db.VarChar(15)
  quantityOrdered      Int
  priceEach            Decimal
  orderLineNumber      Int          @id @default(autoincrement())
  ProductLine          ProductLine? @relation(fields: [productLineOfProduct], references: [productLine])
  productLineOfProduct String?      @db.VarChar(15)

  @@unique([orderNumber, productCode])
  @@map("orderdetails")
}
